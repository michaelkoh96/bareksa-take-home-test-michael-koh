// Code generated by mockery v2.12.3. DO NOT EDIT.

package mocks

import (
	entity "bareksa-take-home-test-michael-koh/core/entity"

	mock "github.com/stretchr/testify/mock"
)

// NewsRepository is an autogenerated mock type for the NewsRepository type
type NewsRepository struct {
	mock.Mock
}

// CreateNews provides a mock function with given fields: news
func (_m *NewsRepository) CreateNews(news entity.News) error {
	ret := _m.Called(news)

	var r0 error
	if rf, ok := ret.Get(0).(func(entity.News) error); ok {
		r0 = rf(news)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteNews provides a mock function with given fields: newsSerial
func (_m *NewsRepository) DeleteNews(newsSerial string) error {
	ret := _m.Called(newsSerial)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(newsSerial)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetNewsByQuery provides a mock function with given fields: query
func (_m *NewsRepository) GetNewsByQuery(query entity.GetNewsQuery) ([]entity.News, error) {
	ret := _m.Called(query)

	var r0 []entity.News
	if rf, ok := ret.Get(0).(func(entity.GetNewsQuery) []entity.News); ok {
		r0 = rf(query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.News)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(entity.GetNewsQuery) error); ok {
		r1 = rf(query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateNews provides a mock function with given fields: news
func (_m *NewsRepository) UpdateNews(news entity.News) error {
	ret := _m.Called(news)

	var r0 error
	if rf, ok := ret.Get(0).(func(entity.News) error); ok {
		r0 = rf(news)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type NewNewsRepositoryT interface {
	mock.TestingT
	Cleanup(func())
}

// NewNewsRepository creates a new instance of NewsRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewNewsRepository(t NewNewsRepositoryT) *NewsRepository {
	mock := &NewsRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
