// Code generated by mockery v2.12.3. DO NOT EDIT.

package mocks

import (
	entity "bareksa-take-home-test-michael-koh/core/entity"

	mock "github.com/stretchr/testify/mock"
)

// TagRepository is an autogenerated mock type for the TagRepository type
type TagRepository struct {
	mock.Mock
}

// CreateTag provides a mock function with given fields: tagName
func (_m *TagRepository) CreateTag(tagName string) error {
	ret := _m.Called(tagName)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(tagName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteTag provides a mock function with given fields: tagName
func (_m *TagRepository) DeleteTag(tagName string) error {
	ret := _m.Called(tagName)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(tagName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetTags provides a mock function with given fields: page, size
func (_m *TagRepository) GetTags(page int, size int) ([]entity.Tag, error) {
	ret := _m.Called(page, size)

	var r0 []entity.Tag
	if rf, ok := ret.Get(0).(func(int, int) []entity.Tag); ok {
		r0 = rf(page, size)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Tag)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(page, size)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateTag provides a mock function with given fields: tagName, newTagName
func (_m *TagRepository) UpdateTag(tagName string, newTagName string) error {
	ret := _m.Called(tagName, newTagName)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(tagName, newTagName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type NewTagRepositoryT interface {
	mock.TestingT
	Cleanup(func())
}

// NewTagRepository creates a new instance of TagRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewTagRepository(t NewTagRepositoryT) *TagRepository {
	mock := &TagRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
