// Code generated by mockery v2.12.3. DO NOT EDIT.

package mocks

import (
	entity "bareksa-take-home-test-michael-koh/core/entity"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// TagsService is an autogenerated mock type for the TagsService type
type TagsService struct {
	mock.Mock
}

// CreateTags provides a mock function with given fields: ctx, tagName
func (_m *TagsService) CreateTags(ctx context.Context, tagName string) error {
	ret := _m.Called(ctx, tagName)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, tagName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteTag provides a mock function with given fields: ctx, tagName
func (_m *TagsService) DeleteTag(ctx context.Context, tagName string) error {
	ret := _m.Called(ctx, tagName)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, tagName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetTags provides a mock function with given fields: ctx, page, size
func (_m *TagsService) GetTags(ctx context.Context, page int, size int) ([]entity.Tag, error) {
	ret := _m.Called(ctx, page, size)

	var r0 []entity.Tag
	if rf, ok := ret.Get(0).(func(context.Context, int, int) []entity.Tag); ok {
		r0 = rf(ctx, page, size)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Tag)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int, int) error); ok {
		r1 = rf(ctx, page, size)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateTags provides a mock function with given fields: ctx, tagName, newTagName
func (_m *TagsService) UpdateTags(ctx context.Context, tagName string, newTagName string) error {
	ret := _m.Called(ctx, tagName, newTagName)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, tagName, newTagName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type NewTagsServiceT interface {
	mock.TestingT
	Cleanup(func())
}

// NewTagsService creates a new instance of TagsService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewTagsService(t NewTagsServiceT) *TagsService {
	mock := &TagsService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
